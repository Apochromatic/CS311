//===========================================================
// HW#: HW1P1 queue
// Your name: Chris Banci
// Compiler: g++
// File type: stack client program
//===========================================================

#include <iostream>
#include <string>
#include "queue.h"

using namespace std;

// PURPOSE: Using a queue, generate at least 25 strings using string characters A, B, and C.
// ALGORITHM: The algorithm works by initially adding elements "A", "B", and  "C" into the queue. To generate new strings,
// an element is popped off the queue and characters from char_set array are sequentially appended to the element forming new strings.
// Three new strings are generated with this. They are then printed to the console and added back to the queue. The generation of strings
// stop when the queue gets full. In this case, at least 25 strings are generated.
int main()
{
	string char_set[3] = { "A", "B", "C" }; //characters used to generate strings.
	string temp; // temp variable used when popping character from queue.
	string newStr; // variable to hold a new generated string.

	queue myQueue; // my queue object instance

	try {
		// Primes the queue with A, B, and C. The starting point.
		// A, B, and C printed to console.
		for (int i = 0; i < 3; i++) {
			myQueue.add(char_set[i]);
			cout << char_set[i] << endl;
		}

		// Main portion of the algorthim which generates the strings. Ends when queue becomes full.
		while (!myQueue.isFull()) {
			myQueue.remove(temp);

			// Strings are generated by appending element removed from queue with a character from char_set.
			for (int i = 0; i < 3; i++) {
				newStr = temp + char_set[i];
				myQueue.add(newStr);

				cout << newStr << endl;
			}
		}
	} //end of try.

	catch (queue::Overflow) {
		cerr << "Error: Overflow! - Queue is full. " << endl;
	}

	return 0;
}